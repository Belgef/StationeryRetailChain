@switch (action)
{
    case Action.All:
        <p class="h4 m-4">Список областей</p>
        @if (items != null)
        {
            <button class="btn btn-primary" @onclick="()=>{ClearForm();newItem=null;action=Action.Add;}">Додати область</button>
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col">Назва</th>
                        <th scope="col">Країна</th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in items.OrderBy(c => c.StateName))
                    {
                        <tr>
                            <td>@item.StateName</td>
                            <td>@item.Country?.CountryName</td>
                            <td><button type="button" class="btn btn-primary" @onclick="()=>Edit(item)"><i class="fa-solid fa-pen-to-square" /></button></td>
                            <td><button type="button" class="btn btn-primary" @onclick="()=>Delete(item)"><i class="fa-solid fa-eraser"></i></button></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        break;
    case Action.Add:
    case Action.Edit:
        <p class="h4 m-4">@((action==Action.Add)?"Додати область":"Редагувати область")</p>
        <EditForm EditContext="editContext" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <FInputString Name="Назва" @bind-Value="newData.Name" />
            <FInputFK Name="Країна" @bind-Value="newData.CountryId" Options=@(countries.ToDictionary(e=>e.CountryId??-1,e=>e.CountryName)) />
            <button type="submit" class="btn btn-primary">@((action==Action.Add)?"Додати":"Редагувати")</button>
        </EditForm>
        <button class="btn btn-primary" @onclick="()=>action=Action.All">Список областей</button>
        break;
}

@code {

    private enum Action { All, Add, Edit }
    private Action action = Action.All;

    private const string Path = "api/states";

    private State[]? items;
    private Country[]? countries;

    //Create
    private EditContext? editContext;
    private class InputData
    {
        public int Id { get; set; } = 0;
        [Required]
        [StringLength(30, MinimumLength = 2, ErrorMessage = "Назва має мати розмір від {2} до {1} символів.")]
        public string Name { get; set; } = "";
        [Required]
        public int CountryId { get; set; }
    }
    private InputData newData = new();
    private State? newItem;
    private ValidationMessageStore? messageStore;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }
    public async Task LoadDataAsync()
    {
        try
        {
            items = await Http.GetFromJsonAsync<State[]>(Path);
            countries = await Http.GetFromJsonAsync<Country[]>("api/countries");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected override void OnInitialized()
    {
        editContext = new(newData);
        messageStore = new(editContext);
    }
    private async void HandleValidSubmit()
    {
        newItem = new State()
            {
                CountryId = newData.CountryId,
                StateName = newData.Name
            };
        messageStore?.Clear();

        HttpResponseMessage result;
        if (action == Action.Add)
            result = await Http.PostAsJsonAsync(Path, newItem);
        else
        {
            newItem.StateId = newData.Id;
            result = await Http.PutAsJsonAsync(Path+"/" + newData.Id, newItem);
        }
        if (result.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeAsync<object>("Alert", new object[] { (action == Action.Add) ? "Область додано" : "Область редаговано" });
            ClearForm();
            newItem = null;
            action = Action.All;
            await LoadDataAsync();
            this.StateHasChanged();
        }
        else
            await JSRuntime.InvokeAsync<object>("Alert", new object[] { result.ReasonPhrase });
    }
    private void ClearForm()
    {
        newData.CountryId = 0;
        newData.Id = -1;
        newData.Name = "";
    }
    private void Edit(State item)
    {
        newData.CountryId = item.CountryId;
        newData.Id = item.StateId ?? 0;
        newData.Name = item.StateName ?? "";
        action = Action.Edit;
    }
    private async void Delete(State item)
    {
        var result = await Http.DeleteAsync(Path+"/" + item.StateId);
        if (result.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeAsync<object>("Alert", new object[] { "Область видалено" });
            await LoadDataAsync();
            action = Action.All;
            this.StateHasChanged();
        }
        else
            await JSRuntime.InvokeAsync<object>("Alert", new object[] { "Ви не можете видалити цю область" });
    }
}
