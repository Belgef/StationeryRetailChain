@switch (action)
{
    case Action.All:
            <div><p class="h4 m-4">Список працівників</p><input type="text" @oninput="@((v)=>Search=v.Value.ToString())" placeholder="Шукати за користувачем" /></div>
        @if (items != null)
        {
            <button class="btn btn-primary" @onclick="()=>{ClearForm();newItem=null;action=Action.Add;}">Додати працівника</button>
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col">Ім'я та прізвище</th>
                        <th scope="col">Контактний номер телефону</th>
                        <th scope="col">Посада</th>
                        <th scope="col">Адреса віділення</th>
                        <th scope="col">Зареєстрований</th>
                        <th scope="col">Електронна адреса</th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in items.Where(e=>e.EmployeeName.ToLower().StartsWith(Search.ToLower())).OrderBy(c => c.EmployeeName))
                    {
                        <tr>
                            <td>@item.EmployeeName</td>
                            <td>@item.EmployeePhoneNumber</td>
                            <td>@item.Job.JobName</td>
                            <td>@($"{item.Shop.StreetAddress}, {item.Shop.City?.CityName}, {item.Shop.City?.State?.StateName}, {item.Shop.City?.State?.Country?.CountryName}")</td>
                            <td>@(users.Any(u=>u.UserName==item.EmployeeName) ? "Так":"")</td>
                            <td>@users.FirstOrDefault(u=>u.UserName==item.EmployeeName)?.Email</td>
                            <td><button type="button" class="btn btn-primary" @onclick="()=>Edit(item)"><i class="fa-solid fa-pen-to-square" /></button></td>
                            <td><button type="button" class="btn btn-primary" @onclick="()=>Delete(item)"><i class="fa-solid fa-eraser"></i></button></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        break;
    case Action.Add:
    case Action.Edit:
        <p class="h4 m-4">@((action==Action.Add)?"Додати працівника":"Редагувати працівника")</p>
        <EditForm EditContext="editContext" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <FInputString Name="Ім'я та прізвище" @bind-Value="newData.Name" />
            <FInputString Name="Телефон" @bind-Value="newData.Phone" />
            <FInputFK Name="Посада" @bind-Value="newData.JobId" Options=@(jobs.ToDictionary(e=>e.JobId??-1,e=>e.JobName)) />
            <FInputFK Name="Відділення" @bind-Value="newData.ShopId" Options=@(shops.ToDictionary(e=>e.ShopId??-1,e=>$"{e.StreetAddress}, {e.City?.CityName}, {e.City?.State?.StateName}, {e.City?.State?.Country?.CountryName}")) />
            
            <button type="submit" class="btn btn-primary">@((action==Action.Add)?"Додати":"Редагувати")</button>
        </EditForm>
        <button class="btn btn-primary" @onclick="()=>action=Action.All">Список працівників</button>
        break;
}

@code {

    private enum Action { All, Add, Edit }
    private Action action = Action.All;

    private const string Path = "api/employees";

    private Employee[]? items;
    private StationeryShop[]? shops;
    private Job[]? jobs;
    private User[]? users;
    
    private string Search { get; set; } = "";
    //Create
    private EditContext? editContext;
    private class InputData
    {
        public int Id { get; set; } = 0;
        [Required]
        [StringLength(50, MinimumLength = 5, ErrorMessage = "Ім'я та прізвище має мати розмір від {2} до {1} символів.")]
        public string Name { get; set; } = "";
        [Required]
        [RegularExpression(@"\d{10}", ErrorMessage = "Номер телефону у невірному форматі.")]
        public string Phone { get; set; } = "";
        [Required]
        public int ShopId { get; set; }
        [Required]
        public int JobId { get; set; }
    }
    private InputData newData = new();
    private Employee? newItem;
    private ValidationMessageStore? messageStore;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }
    public async Task LoadDataAsync()
    {
        try
        {
            items = await Http.GetFromJsonAsync<Employee[]>(Path);
            shops = await Http.GetFromJsonAsync<StationeryShop[]>("api/stationeryshops");
            jobs = await Http.GetFromJsonAsync<Job[]>("api/jobs");
            users = await Http.GetFromJsonAsync<User[]>("api/identity");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected override void OnInitialized()
    {
        editContext = new(newData);
        messageStore = new(editContext);
    }
    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();
        if (newData.ShopId <= 0)
            messageStore?.Add(() => newData.ShopId, "Будь ласка, оберіть відділення");
        if (newData.JobId <= 0)
            messageStore?.Add(() => newData.JobId, "Будь ласка, оберіть професію");
    }
    private async void HandleValidSubmit()
    {
        newItem = new Employee()
            {
                EmployeeName = newData.Name,
                EmployeePhoneNumber = newData.Phone,
                ShopId = newData.ShopId,
                JobId = newData.JobId
            };
        messageStore?.Clear();

        HttpResponseMessage result;
        if (action == Action.Add)
            result = await Http.PostAsJsonAsync(Path, newItem);
        else
        {
            newItem.EmployeeId = newData.Id;
            result = await Http.PutAsJsonAsync(Path+"/" + newData.Id, newItem);
        }
        if (result.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeAsync<object>("Alert", new object[] { (action == Action.Add) ? "Працівника додано" : "Працівника редаговано" });
            ClearForm();
            newItem = null;
            action = Action.All;
            await LoadDataAsync();
            this.StateHasChanged();
        }
        else
            await JSRuntime.InvokeAsync<object>("Alert", new object[] { result.ReasonPhrase });
    }
    private void ClearForm()
    {
        newData.Name = "";
        newData.Id = -1;
        newData.Phone = "";
        newData.ShopId = -1;
        newData.JobId = -1;
    }
    private void Edit(Employee item)
    {
        newData.Phone = item.EmployeePhoneNumber ?? "";
        newData.Id = item.EmployeeId ?? 0;
        newData.Name = item.EmployeeName ?? "";
        newData.ShopId = item.ShopId;
        newData.JobId = item.JobId;
        action = Action.Edit;
    }
    private async void Delete(Employee item)
    {
        var result = await Http.DeleteAsync(Path+"/" + item.EmployeeId);
        if (result.IsSuccessStatusCode)
        {
            User? user = users.FirstOrDefault(u => u.UserName == item.EmployeeName);
            if(user != null)
                await Http.DeleteAsync("api/identity/" + user.UserId);
            await JSRuntime.InvokeAsync<object>("Alert", new object[] { "Працівника видалено" });
            await LoadDataAsync();
            action = Action.All;
            this.StateHasChanged();
        }
        else
            await JSRuntime.InvokeAsync<object>("Alert", new object[] { "Ви не можете видалити цього працівника" });
    }
}
