@page "/seller"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@if (currentEmployee == null)
{
    <div class="spinner-border text-dark" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (!(currentEmployee.Job.JobName.ToLower().Contains("seller")))
{
    <h1 class="display-6 text-center">Доступ заблоковано</h1>
}
else
{
    <h1 class="display-6 text-center">Термінал продавця</h1>
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Дані про продавця</h5>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">Продавець: @currentEmployee.EmployeeName</li>
            <li class="list-group-item">Посада: @currentEmployee.Job.JobName</li>
            <li class="list-group-item">Адреса відділення: @currentEmployee.Shop.StreetAddress</li>
        </ul>
        <div class="card-body">
            <button class="btn btn-primary" @onclick="()=>{newReceipt=null;action=Action.CreateReceipt;}">Нова покупка (Очистити покупку)</button>
            @if (action != Action.History)
            {
                <button class="btn btn-primary" @onclick="()=>action=Action.History">Показати історію продажів</button>
            }
            @if (action != Action.InfoStock)
            {
                <button class="btn btn-primary" @onclick="()=>action=Action.InfoStock">Склад</button>
            }
        </div>
    </div>
    @switch (action)
    {
        case Action.History:
            <p class="h4 m-4">Історія продажів</p>
            @if (receipts != null)
            {
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Номер чеку</th>
                            <th scope="col">Покупець</th>
                            <th scope="col">Сума покупки</th>
                            <th scope="col">Час покупки</th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var receipt in receipts.OrderByDescending(e => e.CreatedAt))
                        {
                            <tr style="cursor:pointer;">
                                <td @onclick="()=>GetReceipt(receipt)">@receipt.ReceiptNumber</td>
                                <td @onclick="()=>GetReceipt(receipt)">@(receipt.Customer?.CustomerName ?? "")</td>
                                <td @onclick="()=>GetReceipt(receipt)">@receipt.PurchaseSum</td>
                                <td @onclick="()=>GetReceipt(receipt)">@receipt.PurchaseDate</td>
                                <td><button type="button" class="btn btn-primary" @onclick="()=>DownloadPdf(receipt)"><i class="fa-solid fa-file-pdf"></i></button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            break;
        case Action.ReceiptDetails:
            <div class="card m-4">
                <div class="card-header">
                    Чек №@currentReceipt.ReceiptNumber
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">Ім'я покупця: @(currentReceipt.Customer?.CustomerName ?? "")</li>
                    <li class="list-group-item">Сума покупки: @currentReceipt.PurchaseSum</li>
                    <li class="list-group-item">Час покупки: @currentReceipt.PurchaseDate</li>
                </ul>
                <div class="card-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">Товар</th>
                                <th scope="col">Ціна</th>
                                <th scope="col">Кількість</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in currentReceipt?.Items)
                            {
                                <tr>
                                    <td>@item.StockProduct.StationeryProduct.Name</td>
                                    <td>@item.SellPrice</td>
                                    <td>@item.SellQuantity</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            break;
        case Action.CreateReceipt:
            <p class="h4 m-4">Створення чеку</p>

            @if (newReceipt == null)
            {
                <EditForm EditContext="receiptEditContext" OnValidSubmit="@HandleReceiptValidSubmit">
                    <div class="mb-3">
                        <label class="form-label">Введіть ім'я покупця:</label>
                        <InputText @bind-Value="newReceiptData.CustomerName" />
                        <ValidationMessage For="() => newReceiptData.CustomerName" />
                    </div>
                    <button type="submit" class="btn btn-primary">Сканувати товари</button>
                </EditForm>
            }
            else
            {
                <p>Ім'я покупця: @newReceiptData.CustomerName</p>
                <p class="h5 m-3">Товари</p>
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Товар</th>
                            <th scope="col">Ціна</th>
                            <th scope="col">Кількість</th>
                            <th scope="col"></th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in newReceipt?.Items)
                        {
                            <tr>
                                <td>@stock.FirstOrDefault(e=>e.StockProductId==item.StockProductId)?.StationeryProduct?.Name</td>
                                <td>@item.SellPrice</td>
                                <td>@item.SellQuantity</td>
                                <td><button type="button" class="btn btn-primary" @onclick="()=>EditProduct(item)"><i class="fa-solid fa-pen-to-square" /></button></td>
                                <td><button type="button" class="btn btn-primary" @onclick="()=>DeleteProduct(item)"><i class="fa-solid fa-eraser"></i></button></td>
                            </tr>
                        }
                    </tbody>
                </table>
                <EditForm EditContext="productEditContext" OnValidSubmit="@HandleProductValidSubmit">
                    <ValidationMessage For="() => newProductData" />
                    <div class="mb-3">
                        <label class="form-label">Товар</label>
                        <InputSelect @bind-Value="newProductData.ProductId">
                            <option value=-1>Оберіть товар ...</option>
                            @foreach (var prod in stock)
                            {
                                <option value=@prod.StockProductId>@prod.StationeryProduct.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => newProductData.ProductId" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Кількість</label>
                        <InputNumber @bind-Value="newProductData.Quantity" />
                        <ValidationMessage For="() => newProductData.Quantity" />
                    </div>
                    <button type="submit" class="btn btn-primary">Додати</button>
                    @if ((newReceipt.Items?.Count() ?? 0) >= 1)
                    {
                        <button type="button" class="btn btn-primary" @onclick="@SaveReceipt">Завершити покупку</button>
                    }
                </EditForm>
            }
            break;
        case Action.InfoStock:
            <p class="h4 m-4">Товари на складі</p>
            @if (stock != null)
            {
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Назва товару</th>
                            <th scope="col">Ціна</th>
                            <th scope="col">Кількість</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var prod in stock.OrderBy(e => e.StationeryProduct.Name))
                        {
                            <tr>
                                <td>@prod.StationeryProduct.Name</td>
                                <td>@prod.StationeryProduct.Price</td>
                                <td>@prod.Quantity</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            break;
    }
}

@code {
    private enum Action { History, ReceiptDetails, CreateReceipt, InfoStock }
    private Action action = Action.History;

    private Employee? currentEmployee;
    private Receipt[]? receipts;
    private Customer[]? customers;
    private StockProduct[]? stock;

    //ReceiptDetails
    private Receipt? currentReceipt;

    //CreateReceipt
    private EditContext? receiptEditContext;
    private class ReceiptData { public string? CustomerName { get; set; } }
    private ReceiptData newReceiptData = new();
    private Receipt? newReceipt;
    private ValidationMessageStore? receiptMessageStore;

    private EditContext? productEditContext;
    private class ProductData { public int ProductId { get; set; } public int Quantity { get; set; } }
    private ProductData newProductData = new();
    private ValidationMessageStore? productMessageStore;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentEmployee = await Http.GetFromJsonAsync<Employee>("api/employees/name/" + authState.User.Identity.Name.Replace('_', ' '));
        if (currentEmployee.Job.JobName.ToLower().Contains("seller"))
            await LoadDataAsync();
    }
    public async Task LoadDataAsync()
    {
        try
        {
            receipts = await Http.GetFromJsonAsync<Receipt[]>("api/receipts?employeeId=" + currentEmployee?.EmployeeId);
            customers = await Http.GetFromJsonAsync<Customer[]>("api/customers");
            stock = await Http.GetFromJsonAsync<StockProduct[]>("api/stockproducts?shopId=" + currentEmployee.ShopId);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    public void GetReceipt(Receipt receipt)
    {
        currentReceipt = receipt;
        action = Action.ReceiptDetails;
    }

    protected override void OnInitialized()
    {
        receiptEditContext = new(newReceiptData);
        receiptEditContext.OnValidationRequested += HandleReceiptValidationRequested;
        receiptMessageStore = new(receiptEditContext);
        productEditContext = new(newProductData);
        productEditContext.OnValidationRequested += HandleProductValidationRequested;
        productMessageStore = new(productEditContext);
    }
    private void HandleReceiptValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        receiptMessageStore?.Clear();
        if (!customers.Any(e => e.CustomerName == newReceiptData.CustomerName))
            receiptMessageStore?.Add(() => newReceiptData.CustomerName, "Клієнта з таким ім'ям не існує");
    }
    private void HandleReceiptValidSubmit()
    {
        Customer? customer = customers.FirstOrDefault(e => e.CustomerName == newReceiptData.CustomerName);
        newReceipt = new Receipt()
            {
                SellerId = currentEmployee.EmployeeId,
                CustomerId = customer.CustomerId,
                PurchaseSum = 0,
                PurchaseDate = DateTime.Now,
                Items = new StationerySale[] { }
            };
        receiptMessageStore?.Clear();
    }
    private void HandleProductValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        productMessageStore?.Clear();
        if (newReceipt.Items.Count() >= 20)
            productMessageStore?.Add(() => newProductData, "Досягнуто максимальної кількості товарів - 20");

        if (newProductData.ProductId == -1)
            productMessageStore?.Add(() => newProductData.ProductId, "Будь ласка, оберіть товар");
        else if (newReceipt.Items.Any(e => e.StockProductId == newProductData.ProductId))
            productMessageStore?.Add(() => newProductData.ProductId, "Даний товар уже додано");
        else if (newProductData.Quantity <= 0)
            productMessageStore?.Add(() => newProductData.Quantity, "Введіть додатню кількість");
        else if (newProductData.Quantity > 200)
            productMessageStore?.Add(() => newProductData.Quantity, "Досягнуто максимальної кількості одиниць за одну покупку");
        else if (newProductData.Quantity > stock.Where(e => e.StockProductId == newProductData.ProductId).First().Quantity)
            productMessageStore?.Add(() => newProductData.Quantity, "На складі недостатньо одиниць товару");
    }
    private void HandleProductValidSubmit()
    {
        newReceipt.Items = newReceipt.Items.Append(new()
            {
                StockProductId = newProductData.ProductId,
                SellQuantity = newProductData.Quantity,
                SellPrice = stock.Where(e => e.StockProductId == newProductData.ProductId).First().StationeryProduct.Price
            }).ToArray();
        productMessageStore?.Clear();
        newProductData.ProductId = -1;
        newProductData.Quantity = 0;
    }
    private async void SaveReceipt()
    {
        var result = await Http.PostAsJsonAsync("api/receipts", newReceipt);
        await LoadDataAsync();
        if(result.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeAsync<object>("Alert", new object[] { "Покупка здійснена успішно" });
            newReceiptData.CustomerName = "";
            newReceipt = null;
            action = Action.History;
            this.StateHasChanged();
        }
        else
            await JSRuntime.InvokeAsync<object>("Alert", new object[] { result.ReasonPhrase });
    }
    private void EditProduct(StationerySale item)
    {
        var newL = newReceipt.Items.ToList();
        newL.Remove(item);
        newReceipt.Items = newL;
        newProductData.ProductId = item.StockProductId;
        newProductData.Quantity = item.SellQuantity;
    }
    private void DeleteProduct(StationerySale item)
    {
        var newL = newReceipt.Items.ToList();
        newL.Remove(item);
        newReceipt.Items = newL;
    }
    private async void DownloadPdf(Receipt item)
    {
        using var streamRef = new DotNetStreamReference(stream: PdfBuilder.CreateReceipt(item, stock));
        await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "receipt"+item.ReceiptNumber+".pdf", streamRef);
    }
}
