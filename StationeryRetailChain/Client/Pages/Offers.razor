@page "/offers"

@attribute [Authorize]

@if (currentEmployee == null)
{
    <div class="spinner-border text-dark" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (!(currentEmployee.Job.JobName.ToLower().Contains("product")|| currentEmployee.Job.JobName.ToLower().Contains("admin")))
{
    <h1 class="display-6 text-center">Доступ заблоковано</h1>
}
else
{
    <h1 class="display-6 text-center">Керування акціями</h1>
    <div class="card">
        <div class="card-body">
            <button class="btn btn-primary" @onclick="()=>action=Action.Index">Усі акції</button>
            <button class="btn btn-primary" @onclick="()=>action=Action.Create">Додати акцію</button>
        </div>
    </div>
    @switch (action)
    {
        case Action.Index:
            <p class="h4 m-4">Усі акції</p>
            @if (offers != null)
            {
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Назва акції</th>
                            <th scope="col">Початок дії</th>
                            <th scope="col">Кінець дії</th>
                            <th scope="col">Статус</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var offer in offers.OrderByDescending(e => e.StartDate))
                        {
                            <tr style="cursor:pointer;" @onclick="()=>GetOffer(offer.OfferId??0)">
                                <td>@offer.OfferName</td>
                                <td>@offer.StartDate</td>
                                <td>@offer.EndDate</td>
                                <td>@((offer.StartDate > DateTime.Now)?"Ще не почато":((offer.EndDate > DateTime.Now)?"Триває":"Завершено"))</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            break;
        case Action.Details:
            @if (currentOffer == null)
            {
                <div class="spinner-grow text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else
            {
                <InfoTable Header="Дані про акцію" Title="@currentOffer.OfferName" Description="@currentOffer.OfferDescription"
               Parameters="@(new Dictionary<string,string>(){
                        {"Початок періоду",currentOffer.StartDate.ToLongDateString()},
                        {"Кінець періоду",currentOffer.EndDate.ToLongDateString()}
                    })" />
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Товар</th>
                            <th scope="col">Знижка</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in currentOffer?.Items)
                        {
                            <tr>
                                <td>@item.Product.Name</td>
                                <td>@(item.Discount*100)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            break;
        case Action.Create:
            <p class="h4 m-4">Створення акції</p>

            @if (!Created)
            {
                <EditForm EditContext="offerEditContext" OnValidSubmit="@HandleOfferValidSubmit">
                    <FInputString Name="Назва" @bind-Value="newOffer.OfferName" />
                    <FInputString Name="Опис" @bind-Value="newOffer.OfferDescription" />
                    <div class="mb-3">
                        <label class="form-label">Дата початку:</label>
                        <InputDate @bind-Value="newOffer.StartDate"/>
                        <ValidationMessage For="()=>newOffer.StartDate" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Дата завершення:</label>
                        <InputDate @bind-Value="newOffer.EndDate"/>
                        <ValidationMessage For="()=>newOffer.EndDate" />
                    </div>
                    <button type="submit" class="btn btn-primary">Додати знижки на товари</button>
                </EditForm>
            }
            else
            {
                <p>Назва акції: @newOffer.OfferName</p>
                <p>Опис акції: @newOffer.OfferDescription</p>
                <p>Дата початку: @newOffer.StartDate</p>
                <p>Дата закінчення: @newOffer.EndDate</p>
                <p class="h5 m-3">Товари</p>
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Товар</th>
                            <th scope="col">Знижка</th>
                            <th scope="col"></th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in newOffer?.Items)
                        {
                            <tr>
                                <td>@products.FirstOrDefault(e=>e.StationeryProductId==item.ProductId)?.Name</td>
                                <td>@(item.Discount*100)</td>
                                <td><button type="button" class="btn btn-primary" @onclick="()=>EditProduct(item)"><i class="fa-solid fa-pen-to-square" /></button></td>
                                <td><button type="button" class="btn btn-primary" @onclick="()=>DeleteProduct(item)"><i class="fa-solid fa-eraser"></i></button></td>
                            </tr>
                        }
                    </tbody>
                </table>
                <EditForm EditContext="productEditContext" OnValidSubmit="@HandleProductValidSubmit">
                    <ValidationMessage For="() => newProductData" />
                    <div class="mb-3">
                        <label class="form-label">Товар</label>
                        <RadzenAutoComplete Data=@products TextProperty="Name" Placeholder="Оберіть товар..." @bind-Value="newProductData.ProductName" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                        <ValidationMessage For="() => newProductData.ProductName" />
                    </div>
                    <FInputString Name="Знижка" @bind-Value="newProductData.Discount" />
                    <button type="submit" class="btn btn-primary">Додати</button>
                    @if ((newOffer.Items?.Count() ?? 0) >= 1)
                    {
                        <button type="button" class="btn btn-primary" @onclick="@SaveOffer">Завершити створення</button>
                    }
                </EditForm>
            }
            break;
    }
}

@code {
    private enum Action { Index, Details, Create }
    private Action action = Action.Index;

    private Employee? currentEmployee;
    private Offer[]? offers;
    private StationeryProduct[]? products;

    private Offer? currentOffer;

    private EditContext? offerEditContext;
    private Offer? newOffer = new(){Items=new OfferStationery[]{}};
    private ValidationMessageStore? offerMessageStore;
    private bool Created = false;

    private EditContext? productEditContext;
    private class ProductData 
    { 
        [Required]
        public string? ProductName { get; set; } 
        [Required]
        [RegularExpression(@"(1)?\d{2}(.\d+)?", ErrorMessage = "Знижка у неправильному форматі.")]
        public string? Discount { get; set; } 
    }
    private ProductData newProductData = new();
    private ValidationMessageStore? productMessageStore;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentEmployee = await Http.GetFromJsonAsync<Employee>("api/employees/name/" + authState.User.Identity.Name.Replace('_', ' '));
        if (currentEmployee.Job.JobName.ToLower().Contains("product"))
            await LoadDataAsync();
    }
    public async Task LoadDataAsync()
    {
        try
        {
            offers = await Http.GetFromJsonAsync<Offer[]>("api/offers");
            products = await Http.GetFromJsonAsync<StationeryProduct[]>("api/stationeryproducts");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    public async void GetOffer(int id)
    {
        currentOffer = await Http.GetFromJsonAsync<Offer>("api/offers/" + id);
        action = Action.Details;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        offerEditContext = new(newOffer);
        offerEditContext.OnValidationRequested += HandleOfferValidationRequested;
        offerMessageStore = new(offerEditContext);
        productEditContext = new(newProductData);
        productEditContext.OnValidationRequested += HandleProductValidationRequested;
        productMessageStore = new(productEditContext);
    }
    private void HandleOfferValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        offerMessageStore?.Clear();
        if (newOffer.StartDate >= newOffer.EndDate)
            offerMessageStore?.Add(() => newOffer.EndDate, "Дата кінця періоду повинна бути більшою від дати початку");
    }
    private void HandleOfferValidSubmit()
    {
        Created = true;
        offerMessageStore?.Clear();
    }
    private void HandleProductValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        productMessageStore?.Clear();
    }
    private void HandleProductValidSubmit()
    {
        newOffer.Items = newOffer.Items.Append(new()
            {
                Discount = decimal.Parse(newProductData.Discount??"0.0")/100,
                ProductId = products.FirstOrDefault(e=>e.Name==newProductData.ProductName)?.StationeryProductId ?? 0
            }).ToArray();
        productMessageStore?.Clear();
        newProductData.ProductName = "";
        newProductData.Discount = "";
    }
    private async void SaveOffer()
    {
        var result = await Http.PostAsJsonAsync("api/offers", newOffer);
        await LoadDataAsync();
        if(result.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeAsync<object>("Alert", new object[] { "Акцію додано успішно" });
            newOffer = new(){Items=new OfferStationery[]{}};
            Created = false;
            action = Action.Index;
            this.StateHasChanged();
        }
        else
            await JSRuntime.InvokeAsync<object>("Alert", new object[] { result.ReasonPhrase });
    }
    private void EditProduct(OfferStationery item)
    {
        var newL = newOffer.Items.ToList();
        newL.Remove(item);
        newOffer.Items = newL;
        newProductData.ProductName = products.FirstOrDefault(e=>e.StationeryProductId==item.ProductId).Name;
        newProductData.Discount = (item.Discount*100).ToString();
    }
    private void DeleteProduct(OfferStationery item)
    {
        var newL = newOffer.Items.ToList();
        newL.Remove(item);
        newOffer.Items = newL;
    }
}
